import { Component } from '@angular/core';
import { log } from 'util';

const logForMember = (target, name, descriptor) => {
  // console.log(target, name, descriptor);
  // store the original function in a variable
  const original = descriptor.value;
  // do some manipulations with descriptor.value
  descriptor.value = (...args: any[]) => {
    console.log(`Arguments ${args} were passed in this function`);
    
    const res = original.apply(this, args);
    console.log(`The result of the function is ${res}`);
    return res;
  }
  // return the descriptor
  return descriptor;
}

const logForClass = (className: any) => {
  console.log(className);
  return (...args: any[]) => {
    console.log(`Arguments passed to this class' constructor are ${args}`);
    return new className(...args);
  }
}

@logForClass
class ExampleDecorator {
  constructor(arg1: any, arg2: any) {
    console.log(`Arguments are ${arg1} & ${arg2}`);
    
  }
}

const deco = new ExampleDecorator(5, 10);

// Class decorator
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'client';

  constructor() {
    // console.log("This statement was generated by", this.aSimpleMethod(5, 2));
  }

  //  Member decorator
  // @logForMember
  // aSimpleMethod(a, b) {
  //   return a*a;
    
  // }
}
